/**
 * This is a rather incomplete example of how reglex can be used to parse the code
 * of a c-like language into tokens. Of course, the use of reglex is not restricted
 * to c-like languages.
 * This code only disects the source code and prints the individual tokens
 */

#include <stdio.h>

void print_lexem();

// Instruction to emit reglex_input_fs variable (must be then set by external code):
// emit_input_fs_var

/*
This code can also be used and modified:

\( %{ print_lexem(); %}
\) %{ print_lexem(); %}
\[ %{ print_lexem(); %}
\] %{ print_lexem(); %}
\{ %{ print_lexem(); %}
\} %{ print_lexem(); %}

: %{ print_lexem(); %}
; %{ print_lexem(); %}
, %{ print_lexem(); %}
\? %{ print_lexem(); %}

= %{ print_lexem(); %}

! %{ print_lexem(); %}
% %{ print_lexem(); %}
& %{ print_lexem(); %}
\| %{ print_lexem(); %}
/ %{ print_lexem(); %}
\- %{ print_lexem(); %}
\+ %{ print_lexem(); %}
\* %{ print_lexem(); %}
~ %{ print_lexem(); %}
\^ %{ print_lexem(); %}
< %{ print_lexem(); %}
> %{ print_lexem(); %}

%= %{ print_lexem(); %}
&= %{ print_lexem(); %}
\|= %{ print_lexem(); %}
/= %{ print_lexem(); %}
\-= %{ print_lexem(); %}
\+= %{ print_lexem(); %}
\*= %{ print_lexem(); %}
~= %{ print_lexem(); %}
\^= %{ print_lexem(); %}
<<= %{ print_lexem(); %}
>>= %{ print_lexem(); %}

&& %{ print_lexem(); %}
\|\| %{ print_lexem(); %}
\+\+ %{ print_lexem(); %}
\-\- %{ print_lexem(); %}
<< %{ print_lexem(); %}
>> %{ print_lexem(); %}

== %{ print_lexem(); %}
!= %{ print_lexem(); %}
<= %{ print_lexem(); %}
>= %{ print_lexem(); %}
*/

%%

emit_main

%%

BIN_DIGIT [01]
OCT_DIGIT [0-7]
DEC_DIGIT [0-9]
HEX_DIGIT [0-9a-fA-F]

BIN_LIT 0[bB]{BIN_DIGIT}+
OCT_LIT 0{OCT_DIGIT}+
DEC_LIT {DEC_DIGIT}+
HEX_LIT 0[xX]{HEX_DIGIT}+

POINTGROUP {DEC_DIGIT}\.|\.{DEC_DIGIT}

FLOAT_LIT {DEC_DIGIT}*{POINTGROUP}{DEC_DIGIT}*

STR_LIT "([^"]|\\")*"

CHAR_LIT '([^']|\\')'

NAME [a-zA-Z_][a-zA-Z_0-9]*

WHITESPACE [\n\r\t\s]

MULTILINE_COMMENT /\*([^\*]|(\*+[^\*/]))*\*+/
SINGLE_LINE_COMMENT //[^\n]*\n
COMMENT {MULTILINE_COMMENT}|{SINGLE_LINE_COMMENT}

%%

{BIN_LIT} %{ printf("binary int literal: '%s'\n", reglex_lexem()); %}
{OCT_LIT} %{ printf("octal int literal: '%s'\n", reglex_lexem()); %}
{DEC_LIT} %{ printf("decimal int literal: '%s'\n", reglex_lexem()); %}
{HEX_LIT} %{ printf("hexadecimal int literal: '%s'\n", reglex_lexem()); %}
{FLOAT_LIT} %{ printf("float literal: '%s'\n", reglex_lexem()); %}
{STR_LIT} %{ printf("string literal: '%s'\n", reglex_lexem()); %}
{CHAR_LIT} %{ printf("char literal: '%s'\n", reglex_lexem()); %}
{NAME} %{ printf("name: '%s'\n", reglex_lexem()); %}

\(|\)|\[|\]|\{|\}|:|;|,|\?|=|!|%|&|\||/|\-|\+|\*|~|\^|<|=|&=|\|=|/=|\-=|\+=|\*=|~=|\^=|<<=|=|&&|\|\||\+\+|\-\-|<<|==|!=|<=|= %{ print_lexem(); %}

{WHITESPACE}|{COMMENT} %{%}

. %{ fprintf(stderr, "Illegal character encountered: '%s'", reglex_lexem()); exit(1); %}

%%

void print_lexem() {
  printf("%s\n", reglex_lexem());
}
